subroutine SwanReadADCGrid
!
!   --|-----------------------------------------------------------|--
!     | Delft University of Technology                            |
!     | Faculty of Civil Engineering and Geosciences              |
!     | Environmental Fluid Mechanics Section                     |
!     | P.O. Box 5048, 2600 GA  Delft, The Netherlands            |
!     |                                                           |
!     | Programmer: Marcel Zijlema                                |
!   --|-----------------------------------------------------------|--
!
!
!     SWAN (Simulating WAves Nearshore); a third generation wave model
!     Copyright (C) 1993-2023  Delft University of Technology
!
!     This program is free software: you can redistribute it and/or modify
!     it under the terms of the GNU General Public License as published by
!     the Free Software Foundation, either version 3 of the License, or
!     (at your option) any later version.
!
!     This program is distributed in the hope that it will be useful,
!     but WITHOUT ANY WARRANTY; without even the implied warranty of
!     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
!     GNU General Public License for more details.
!
!     You should have received a copy of the GNU General Public License
!     along with this program. If not, see <http://www.gnu.org/licenses/>.
!
!
!   Authors
!
!   40.80: Marcel Zijlema
!   40.95: Marcel Zijlema
!   41.07: Casey Dietrich
!
!   Updates
!
!   40.80, December 2007: New subroutine
!   40.95,     June 2008: parallelization of unSWAN using MESSENGER of ADCIRC
!   41.07,   August 2009: use ADCIRC boundary info to mark all boundary vertices
!
!   Purpose
!
!   Reads ADCIRC grid described in fort.14
!
!   Method
!
!   Grid coordinates of vertices are read from file fort.14 and stored in Swan data structure
!   Vertices of triangles are read from file fort.14 and stored in Swan data structure
!
!   Bottom topography from file fort.14 will also be stored
!
!   Modules used
!
    use ocpcomm2
    use ocpcomm4
    use m_genarr
    use SwanGriddata
!PUN    use SIZES
!PUN    use MESSENGER
!Casey 231217: Carrying forward changes from earlier version.
!ADC    use HASHTABLE
!PUN    use ADC_CONSTANTS, ONLY: DEG2RAD, RAD2DEG
    implicit none
!
!   Local variables
!
    character(lenfnm)       :: grdfil   ! name of grid file including path
    integer, save           :: ient = 0 ! number of entries in this subroutine
    integer                 :: idum     ! dummy integer
    integer                 :: ii       ! auxiliary integer
    integer                 :: iostat   ! I/O status in call FOR
    integer                 :: istat    ! indicate status of allocation
    integer                 :: itype    ! ADCIRC boundary type
    integer                 :: ivert    ! vertex index
    integer                 :: ivert1   ! another vertex index
    integer                 :: j        ! loop counter
    integer                 :: k        ! loop counter
    integer                 :: n1       ! auxiliary integer
    integer                 :: n2       ! another auxiliary integer
!Casey 231217: Carrying forward changes from earlier version.
!ADC    integer                 :: n3       ! yet another auxiliary integer
    integer                 :: ndsd     ! unit reference number of file
    integer                 :: nopbc    ! number of open boundaries in ADCIRC
    integer                 :: vm       ! boundary marker
    character(80)           :: line     ! auxiliary textline
    logical                 :: stpnow   ! indicate whether program must be terminated or not

!AmanT/Dam 202405 for global mesh
    real(8), dimension(:,:), allocatable :: xve, yve     ! longitude original input
    real(8), dimension(:), allocatable :: xver, yver, xver_tmp, yver_tmp  ! rotated lon lat
    real(8), dimension(3)   :: LONVE, LATVE
    logical                 :: crossflag
    REAL(8)                 :: PHIN, THETAN 
    integer                 :: rotmunit ! unit refer for fort.rotm
    character(lenfnm)       :: fort_rotm   ! name of fort file including path
    character(80)           :: firstline_rotm  !alphaphet line (first line in fort.rotm)



    REAL(8):: ROTMAT(3,3) = reshape( (/ 1.0, 0.0, 0.0, &
                                  0.0, 1.0, 0.0, &
                                  0.0, 0.0, 1.0 /), (/3, 3/)) ; 

!AmanT/Dam 202405 for global mesh

!ADC   type(ipair),allocatable :: node_dict(:) ! node hashtable dictionary
    character(lenfnm):: grdout 


!Casey 231217: Carrying forward changes from earlier version.

!
!   Structure
!
!   Description of the pseudo code
!
!   Source text
!
    if (ltrace) call strace (ient,'SwanReadADCGrid')
    !
    ! open file fort.14
    !
    ndsd   = 0
    iostat = 0
    grdfil = 'fort.14'
    grdout = 'swan.14'
    fort_rotm = 'fort.rotm'

!PUN    grdfil = trim(INPUTDIR)//DIRCH2//trim(grdfil)
!PUN    grdout = trim(INPUTDIR)//DIRCH2//trim(grdout)
!PUN    fort_rotm = trim(INPUTDIR)//trim(fort_rotm)
    call for (ndsd, grdfil, 'OF', iostat)
    if (stpnow()) goto 900
    !
    ! skip first line
    !
    read(ndsd,'(a80)', end=950, err=910) line
    !
    ! read number of elements and number of vertices
    !
    read(ndsd, *, end=950, err=910) ncells, nverts
    istat = 0
    if(.not.allocated(xcugrd)) allocate (xcugrd(nverts), stat = istat)
    if ( istat == 0 ) then
       if(.not.allocated(ycugrd)) allocate (ycugrd(nverts), stat = istat)
    endif
    if ( istat == 0 ) then
       if(.not.allocated(DEPTH)) allocate (DEPTH(nverts), stat = istat)
    endif
!Casey 231217: Carrying forward changes from earlier version.
!ADC    call dict(node_dict,nverts)    
    if ( istat /= 0 ) then
       call msgerr ( 4, 'Allocation problem in SwanReadADCGrid: array xcugrd, ycugrd or depth ' )
       goto 900
    endif
    !
    ! read coordinates of vertices and bottom topography
    !
    do j = 1, nverts
!Casey 231217: Carrying forward changes from earlier version.
!NADC       read(ndsd, *, end=950, err=910) ii, xcugrd(ii), ycugrd(ii), DEPTH(ii)
!NADC       if ( ii/=j ) call msgerr ( 1, 'numbering of vertices is not sequential in grid file fort.14 ' )
!ADC       read(ndsd, *, end=950, err=910) ii, xcugrd(j), ycugrd(j), DEPTH(j)
!ADC       call add_ipair(node_dict,ii,j)
    enddo
   ! print *, "nverts", nverts  !testing

!PUN    open( unit = 141, file = grdout, action = "write" ) ;
!PUN    write( 141, *) 'mesh' 
!PUN    write( 141, *) ncells, nverts
    !
    if(.not.allocated(kvertc)) allocate (kvertc(3,ncells), stat = istat)
    if ( istat /= 0 ) then
       call msgerr ( 4, 'Allocation problem in SwanReadADCGrid: array kvertc ' )
       goto 900
    endif
    !
    ! read vertices of triangles
    !
    do j = 1, ncells
!Casey 231217: Carrying forward changes from earlier version.
!NADC       read(ndsd, *, end=950, err=910) ii, idum, kvertc(1,ii), kvertc(2,ii), kvertc(3,ii)
!NADC       if ( ii/=j ) call msgerr ( 1, 'numbering of triangles is not sequential in grid file fort.14 ' )
!ADC       read(ndsd, *, end=950, err=910) ii, idum, n1, n2, n3
!ADC       kvertc(1,ii) = find(node_dict,n1)
!ADC       kvertc(2,ii) = find(node_dict,n2)
!ADC       kvertc(3,ii) = find(node_dict,n3)
    enddo
    !
    if(.not.allocated(vmark)) allocate (vmark(nverts), stat = istat)
    if ( istat /= 0 ) then
       call msgerr ( 4, 'Allocation problem in SwanReadADCGrid: array vmark ' )
       goto 900
    endif
    vmark = 0
    !
    ! read ADCIRC boundary information and store boundary markers
    !
    read(ndsd, *, end=950, err=910) nopbc
    read(ndsd, *, end=950, err=910) idum
    do j = 1, nopbc
!PUN       if ( MNPROC==1 ) then
          vm = j
          read(ndsd, *, end=950, err=910) n2
!PUN       else
!PUN          read(ndsd, *, end=950, err=910) n2, vm
!PUN       endif
       do k = 1, n2
           read(ndsd, *, end=950, err=910) ivert
!Casey 231217: Carrying forward changes from earlier version.
!NADC             vmark(ivert) = vm
!ADC             vmark(find(node_dict,ivert)) = vm
       enddo
    enddo
    !
    read(ndsd, *, end=950, err=910) n1
    read(ndsd, *, end=950, err=910) idum
    do j = 1, n1
!PUN       if ( MNPROC==1 ) then
          vm = nopbc + j
          read(ndsd, *, end=950, err=910) n2, itype
!PUN       else
!PUN          read(ndsd, *, end=950, err=910) n2, itype, vm
!PUN       endif
       if ( itype /= 4 .and. itype /= 24 ) then
          do k = 1, n2
             read(ndsd, *, end=950, err=910) ivert
!Casey 231217: Carrying forward changes from earlier version.
!NADC           vmark(ivert) = vm
!ADC           vmark(find(node_dict,ivert)) = vm
          enddo
       else
          do k = 1, n2
             read(ndsd, *, end=950, err=910) ivert, ivert1
!Casey 231217: Carrying forward changes from earlier version.
!NADC             vmark(ivert ) = vm
!NADC             vmark(ivert1) = vm
!ADC            vmark(find(node_dict,ivert )) = vm
!ADC            vmark(find(node_dict,ivert1)) = vm
          enddo
       endif
    enddo
    !
    ! close file fort.14
    !
    close(ndsd)


!PUN      allocate(xver(nverts),yver(nverts))
!PUN      allocate(xver_tmp(nverts),yver_tmp(nverts))


!PUN         do k = 1,nverts
!PUN                xver_tmp(k) = xcugrd(k)*DEG2RAD
!PUN               yver_tmp(k) = ycugrd(k)*DEG2RAD
!PUN         enddo            


!PUN      PHIN = -42.8906
!PUN      THETAN = 72.300

!Call for rotation matrix
!PUN        call DRV_ROTMAT_ZNVEC( PHIN, THETAN ) 

!PUN        call SPCOORSROTS1( ROTMAT, xver, yver, xver_tmp, yver_tmp, nverts) 

!PUN         do k = 1,nverts
!PUN                xcugrd(k) = xver(k)*RAD2DEG
!PUN               ycugrd(k) = yver(k)*RAD2DEG
!PUN         enddo

           
             do j = 1, nverts
                write(141,*) j, xcugrd(j), ycugrd(j), depth(j)
             enddo      
             do j = 1, ncells
                write(141,*) j, 3, kvertc(:,j) ;
              end do
              write(141,*) 0
              write(141,*) 0
              write(141,*) 0
              write(141,*) 0
             close(141) ;
!AmanT/Dam 202405 for global mesh
!PUN        allocate(xve(3,ncells),yve(3,ncells))  


!PUN          crossflag = .FALSE. 
!PUN          do j = 1, ncells
               !print *, "Inside test loop now" 
!PUN           xve(1,j) = xcugrd(kvertc(1,j));
!PUN           xve(2,j) = xcugrd(kvertc(2,j));
!PUN           xve(3,j) = xcugrd(kvertc(3,j));
             
!PUN           lonve(1) = xcugrd(kvertc(1,j));
!PUN           lonve(2) = xcugrd(kvertc(2,j));
!PUN           lonve(3) = xcugrd(kvertc(3,j));

!PUN           yve(1,j) = ycugrd(kvertc(1,j));
!PUN           yve(2,j) = ycugrd(kvertc(2,j));
!PUN           yve(3,j) = ycugrd(kvertc(3,j));
           
!PUN           latve(1) = ycugrd(kvertc(1,j));
!PUN           latve(2) = ycugrd(kvertc(2,j));
!PUN           latve(3) = ycugrd(kvertc(3,j));

!PUN           call SwanReadGlobalADC(xve(:,j), yve(:,j), lonve, latve, crossflag )

!PUN        enddo

              if (crossflag.eq..false.) then 

!PUN          do j = 1, ncells
!PUN           xcugrd(kvertc(1,j)) = xve(1,j);
!PUN           xcugrd(kvertc(2,j)) = xve(2,j);
!PUN           xcugrd(kvertc(3,j)) = xve(3,j);


!PUN           ycugrd(kvertc(1,j)) = yve(1,j);
!PUN           ycugrd(kvertc(2,j)) = yve(2,j);
!PUN           ycugrd(kvertc(3,j)) = yve(3,j);
!PUN               enddo      
              endif

  
          
!!             do j = 1, nverts
!!                write(141,*) j, xcugrd(j), ycugrd(j), depth(j)
!!             enddo      
!!             do j = 1, ncells
!!                write(141,*) j, 3, kvertc(:,j) ;
!!              end do
!!              write(141,*) 0
!!              write(141,*) 0
!!              write(141,*) 0
!!              write(141,*) 0
!!             close(141) ;

!Casey 231217: Carrying forward changes from earlier version.
!ADC    call close_dict(node_dict)    
    !
!PUN       ! ghost vertices are marked with +999
!PUN       !
!PUN       do j = 1, NEIGHPROC
!PUN          do k = 1, NNODRECV(j)
!PUN             ivert = IRECVLOC(k,j)
!PUN             vmark(ivert) = 999
!PUN          enddo
!PUN       enddo
!PUN       !

 900 return
    !
 910 call msgerr (4, 'error reading data from grid file fort.14' )
    goto 900
 950 call msgerr (4, 'unexpected end of file in grid file fort.14' )
    goto 900
    !


   
    CONTAINS

!AmanT/Dam 202405 for global mesh
subroutine SwanReadGlobalADC(XVE, YVE, LONVE, LATVE,CROSSFLAG)  

        use ocpcomm2
        use ocpcomm4
        use m_genarr
        use SwanGriddata
!PUN    use SIZES       
!PUN    use MESSENGER
!ADC    use HASHTABLE

   
       IMPLICIT NONE

      !c Dummy 
      !c   XVE, YVE     -- output
      !c   LONM, LATM -- input
       REAL (8), DIMENSION(3), intent(out) :: XVE, YVE
       REAL (8), DIMENSION(3), intent(in) :: LONVE, LATVE
       LOGICAL, intent(out) :: CROSSFLAG       
      !c Local 
       INTEGER:: II, IDX, SPF
       
       REAL (8):: Jac1, Jac2
       REAL (8), dimension(3):: LONM, LATM
       REAL (8), dimension(3):: LONTMP
       REAL (8), dimension(3):: DLX, DL
       REAL (8):: DLED1, DLED2
           
!       CROSSFLAG = .FALSE.
  
       LATM(:) = LATVE(1:3) 
      !c Adjust so that 0 <= lon <= 360 
       LONM(:) = MODULO( LONVE(1:3), 360.0D0 ) ; 
       LONTMP = LONM ; 

       CALL CAL_JAC( Jac1, LONM, LATM )
       CALL CAL_EDGELENGTH( DLED1, LONM, LATM ) ; 
   
       SPF = 0 ; 
       if (  Jac1 < 0.0D0 .OR. &
          (Jac1 > 0.0D0 .AND. DLED1 > 360.0D0 ) ) THEN
         !c An element has a circular index. 
         !c Put a wrapped node on the other side
         CROSSFLAG = .TRUE. 
         !c A wrapped node is on the left of 180
         if ( COUNT( LONM > 180.0D0 ) == 1 ) THEN
            IDX = sum( merge( (/ 1, 2, 3 /), &
                (/ 0, 0, 0 /), LONM > 180.0D0 ) ) ;

            LONM(IDX) = LONM(IDX) - 360.0D0 ; 
         endif
         
         !c A wrapped node is on the right of 180
         if ( COUNT( LONM < 180.0D0 ) == 1 ) THEN
            IDX = sum( merge( (/ 1, 2, 3 /), & 
                (/ 0, 0, 0 /), LONM < 180.0D0 ) ) ;
            
            LONM(IDX) = LONM(IDX) + 360.0D0 ; 
         endif        

         CALL CAL_JAC( Jac2, LONM, LATM )
         CALL CAL_EDGELENGTH( DLED2, LONM, LATM ) ; 

         SPF = 1 ;
         if ( Jac2 < 0.0D0 .OR. &
             (Jac1 > 0.0D0 .AND. DLED2 > DLED1) ) THEN
            LONM = LONTMP ;  
            SPF = 0 ; 
         endif
      endif

      do II=1,3
        XVE(II) = LONM(II)
        YVE(II) = LATM(II)
      enddo
       
      RETURN ;

end subroutine SwanReadGlobalADC

subroutine CAL_EDGELENGTH( DEDGE, LON, LAT ) 

    use ocpcomm2
    use ocpcomm4
    use m_genarr
    use SwanGriddata
!PUN    use SIZES

           IMPLICIT NONE

           REAL (8):: DEDGE, LON(3), LAT(3)

           !c local c!
           REAL (8), dimension(3):: DLX, DLY

           DLX = (/ LON(2) - LON(1), &
               LON(3) - LON(2), LON(1) - LON(3) /) ; 
           DLY = (/ LAT(2) - LAT(1), &
               LAT(3) - LAT(2), LAT(1) - LAT(3) /) ; 
           
           DEDGE = SQRT( SUM(DLX*DLX + DLY*DLY) ) ; 

           RETURN ;
end subroutine CAL_EDGELENGTH

subroutine CAL_JAC( Jac, LON, LAT )
    use ocpcomm2
    use ocpcomm4
    use m_genarr
    use SwanGriddata
!PUN    use SIZES
           IMPLICIT NONE

           REAL (8):: Jac, LON(3), LAT(3)

           REAL (8):: XR(2), XS(2)

           XR = 0.5D0*(/ LON(2) - LON(1), LAT(2) - LAT(1) /) ; 
           XS = 0.5D0*(/ LON(3) - LON(1), LAT(3) - LAT(1) /) ; 

           Jac = (XR(1)*XS(2) - XR(2)*XS(1)) ; ! Find Jacobian

           RETURN ;
end subroutine CAL_JAC

!AmanT/Dam 202405 for global mesh

! varphi and theta comes from the fort.rotm file

subroutine DRV_ROTMAT_ZNVEC( VARPHI, THETA )
        use ocpcomm2
        use ocpcomm4
        use m_genarr
        use SwanGriddata
!PUN    use SIZES
!PUN    use ADC_CONSTANTS, ONLY: DEG2RAD

        IMPLICIT NONE

        REAL(8) :: VARPHI, THETA ! in deg

        !c local c!
        REAL(8) :: RADPHI, RADTHETA
        INTEGER :: IERR

        
        !c deg to rad
        RADPHI = VARPHI*DEG2RAD ;
        RADTHETA = THETA*DEG2RAD ;   
        
        CALL CHECK_RTOTMAT(ROTMAT, IERR)
        CALL GET_ROTMAT_ZNVEC( ROTMAT, RADPHI, RADTHETA );
        
        RETURN 
end subroutine DRV_ROTMAT_ZNVEC


      ! Given a radius vector (\varphi,\theta) (in rad)
      ! of z', the new z after rotation, return
      ! a transformation matrix:
      !        RTOT: (x,y,z) -> (x',y',z')  
subroutine GET_ROTMAT_ZNVEC( RTOT, VARPHIN, THETAN )   
        IMPLICIT NONE
      
        REAL(8) :: RTOT(:,:) 
        REAL(8) :: VARPHIN, THETAN
      
        RTOT = 0.0D0 ;
      
        RTOT(1,1) = sin( VARPHIN ) ; 
        RTOT(2,1) = sin( THETAN )*cos( VARPHIN ) ;
        RTOT(3,1) = cos( THETAN )*cos( VARPHIN ) ; 
      
        RTOT(1,2) = -cos( VARPHIN ) ; 
        RTOT(2,2) = sin( THETAN )*sin( VARPHIN ) ;
        RTOT(3,2) = cos( THETAN )*sin( VARPHIN ) ; 
        
        RTOT(1,3) = 0.0D0 ;
        RTOT(2,3) = -cos( THETAN ) ; 
        RTOT(3,3) =  sin( THETAN ) ; 
        
        RETURN ;
end subroutine GET_ROTMAT_ZNVEC

subroutine SPCOORSROTS0( RTOTS, LONR, LATR, LONO, LATO )
        IMPLICIT NONE

        !c dummy c!
        REAL(8) :: RTOTS(3,3)
        REAL(8) :: LONR, LATR
        REAL    :: LONO, LATO

        !c local c!
        INTEGER:: IP
        REAL(8) :: XP(3), XPR(3), LLO, LTO

        LLO = LONO  ; 
        LTO = LATO  ; 
 
        XP(1) = cos( LTO )*cos( LLO ) ; 
        XP(2) = cos( LTO )*sin( LLO ) ; 
        XP(3) = sin( LTO ) ; 
        
        XPR = MATMUL( RTOTS, XP) ;
        
        LATR = atan2( XPR(3), SQRT(XPR(1)*XPR(1) + XPR(2)*XPR(2)) ) ;
        LONR = atan2( XPR(2), XPR(1) ) ;   

        RETURN ; 
end subroutine SPCOORSROTS0
     
subroutine SPCOORSROTS1( RTOTS, LONR, LATR, LONO, LATO, NN )
        IMPLICIT NONE

        !c dummy c!
        INTEGER :: NN
        REAL(8) :: RTOTS(3,3)
        REAL(8), dimension(:):: LONR, LATR
        REAL(8), dimension(:) ::  LONO, LATO

        !c local c!
        INTEGER :: IP
        REAL(8) :: XP(3), XPR(3), LLO, LTO


        DO IP = 1, NN
           LLO = LONO( IP ) ; 
           LTO = LATO( IP ) ; 
 
           XP(1) = cos( LTO )*cos( LLO ) ; 
           XP(2) = cos( LTO )*sin( LLO ) ; 
           XP(3) = sin( LTO ) ; 

           XPR = MATMUL( RTOTS, XP) ;

           LATR(IP) = atan2( XPR(3), SQRT(XPR(1)*XPR(1) + XPR(2)*XPR(2)) )
           LONR(IP) = atan2( XPR(2), XPR(1) ) ;   
        END DO
        
        RETURN ; 
end subroutine SPCOORSROTS1

subroutine CHECK_RTOTMAT( RTOTS, IERR )
        IMPLICIT NONE

        INTEGER:: IERR
        REAL(8), intent(in):: RTOTS(3,3)

        !c local c!
        REAL(8) :: RTT(3,3), TR, SOFFD


        RTT = TRANSPOSE( RTOTS ) ; 

        RTT = MATMUL(RTT, RTOTS ) ; 

        ! trace of a matrix RTT 
        TR = RTT(1,1) + RTT(2,2) + RTT(3,3) ; 
       
        RTT(1,1) = 0.0 ;
        RTT(2,2) = 0.0 ;
        RTT(3,3) = 0.0 ;
        
        SOFFD = SUM( MATMUL(ABS(RTT), (/ 1.0D0, 1.0D0, 1.0D0 /)) )  ;

        IERR = 0 ;
        IF ( SOFFD > 1.0e-10 ) THEN
           IERR = 1 ; 
           
           print *, "Error: a given rotation matrix is not orthgonal and thus invalid" ;
        END IF

        RETURN ;
end subroutine CHECK_RTOTMAT

end subroutine SwanReadADCGrid
